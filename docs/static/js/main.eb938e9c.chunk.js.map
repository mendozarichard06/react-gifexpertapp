{"version":3,"sources":["components/AddCategory.js","components/helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GitExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","key","GitExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAEaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EACTC,mBAAS,IADA,mBACtCC,EADsC,KAC1BC,EAD0B,KAiB7C,OACI,0BAAMC,SAZW,SAACC,GAClBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC/BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OAC9CN,EAAc,OASP,2BACAO,KAAK,OACLC,MAAQT,EACRU,SArBsB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,iDACoCC,UAAWH,GAD/C,+DAEDI,MAAMF,GAFL,cAEdG,EAFc,gBAGCA,EAAKC,OAHN,uBAGbC,EAHa,EAGbA,KAEDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAGD,EAAIC,GACPC,MAAMF,EAAIE,MACVV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QATtB,kBAYbM,GAZa,4CAAH,sDCEPO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEpC,OACI,yBAAKc,UAAU,0CACd,yBAAKC,IAAMf,EAAMgB,IAAKN,IACrB,2BAAIA,KC8BCO,EA/BC,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECHN,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAK,GACLa,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAwB5C,OAlBIC,qBAAW,SAACvB,GAEhBD,EAASC,GACRwB,MAAK,SAAAC,GAEEH,EAAS,CACTf,KAAMkB,EACNL,SAAS,SAQV,IAGAC,EDlB2BK,GAApBb,EAHoB,EAGzBN,KAAaa,EAHY,EAGZA,QAMrB,OACC,oCACC,gCAAMpB,EAAN,KAECoB,GAAW,uBAAGJ,UAAU,qCAAb,WACZ,yBAAKA,UAAU,aAKbH,EAAOJ,KAAI,SAAAC,GAAG,OACb,kBAAC,EAAD,eACCiB,IAAKjB,EAAIC,IACLD,UEvBEkB,EAAe,WAAO,IAAD,EAEK1C,mBAAS,CAAC,aAFf,mBAExB2C,EAFwB,KAEZ5C,EAFY,KAK9B,OACI,oCAEI,4CACA,kBAAC,EAAD,CAAaA,cAAgBA,IAC7B,6BAGI,4BAEI4C,EAAWpB,KAAK,SAAAT,GAAQ,OACpB,kBAAC,EAAD,CACA2B,IAAK3B,EACLA,SAAWA,U,MCjBnC8B,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.eb938e9c.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({ setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('')\r\n    const handleInputChange = (e) =>{\r\n        \r\n        setInputValue(e.target.value)\r\n    }\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (inputValue.trim().length > 2){\r\n        setCategories(cats => [ inputValue, ...cats ])\r\n setInputValue('');   \r\n    \r\n    \r\n    }\r\n\r\n    }\r\n    return(\r\n        <form onSubmit = {handleSubmit}>\r\n        \r\n        <input\r\n        type=\"text\"\r\n        value={ inputValue }\r\n        onChange={ handleInputChange}\r\n        />\r\n        \r\n        \r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes= {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async( category ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI( category )}&limit=15&api_key=GbVHgPIaOSGLcdxG5GkRH78y75g2U1zs`;\r\n   const resp = await fetch(url);\r\n   const {data} = await resp.json();\r\n\r\n   const gifs = data.map( img => {\r\n       return {\r\n           id:img.id,\r\n           title:img.title,\r\n           url: img.images?.downsized_medium.url\r\n       }\r\n   });\r\n   return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n    \r\n    return (\r\n        <div className=\"card animate__animated animate__bounce\">\r\n         <img src={ url } alt={title}/>\r\n          <p>{title}</p>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nconst GifGrid = ({ category }) => {\r\n\r\n\r\n\tconst { data:images, loading } = useFetchGifs(category);\r\n\r\n\r\n\r\n\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<h3> {category} </h3>\r\n\r\n\t\t\t{loading && <p className=\"animate__animated animate__fadeIn\">loading</p>}\r\n\t\t\t<div className=\"card-grid\">\r\n\r\n\r\n\r\n\t\t\t\t{\r\n\t\t\t\t\timages.map(img => (\r\n\t\t\t\t\t\t<GifGridItem\r\n\t\t\t\t\t\t\tkey={img.id}\r\n\t\t\t\t\t\t\t{...img}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t))\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t</>\r\n\t)\r\n}\r\n\r\nexport default GifGrid\r\n","import { useState, useEffect } from 'react';\r\nimport {getGifs} from '../components/helpers/getGifs'\r\n\r\nexport const useFetchGifs = ( category ) => {\r\n    const [state, setState] = useState({\r\n        data:[],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( (category) => {\r\n\r\ngetGifs( category )\r\n.then(imgs => {\r\n     \r\n        setState({\r\n        data: imgs,\r\n        loading: false\r\n    })\r\n    \r\n})\r\n\r\n\r\n\r\n\r\n    }, [])\r\n   \r\n   \r\nreturn state;\r\n} \r\n","\r\nimport React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport GifGrid from './components/GifGrid';\r\n\r\nexport const GitExpertApp = () => {\r\n   \r\n   const [categories, setCategories] = useState(['One Push']);\r\n \r\n\r\n    return (\r\n        <>\r\n\r\n            <h2>GitExpertApp</h2>\r\n            <AddCategory setCategories={ setCategories } />\r\n            <hr/>\r\n            \r\n            \r\n                <ol>\r\n                {\r\n                    categories.map( category => (\r\n                        <GifGrid \r\n                        key={category}\r\n                        category={ category }\r\n                        />\r\n                     ))\r\n                }\r\n\r\n                </ol>\r\n            \r\n            \r\n        </>\r\n    )\r\n};\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { GitExpertApp } from './GitExpertApp';\nimport './index.css';\n\nReactDOM.render(\n\n    <GitExpertApp/>,\n\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}